import openpyxl
import pandas as pd
import codecs  # Módulo para realizar a transformação ROT13

# Caminho do arquivo
caminho_arquivo = "/home/henrique/Downloads/Relatório_Completo.xlsx"

# Colunas desejadas
colunas_desejadas = [
    'Data Atendimento',
    'Código Atendimento',
    'Paciente',
    'Idade',
    'ID amigo',
    'Profissional',
    'Forma de Pagamento',
    'Item',
    'Quantidade',
    'Valor total do item R$',
    'Número lote',
    'Data envio',
    'Data pagamento',
    'Valor pago R$',
    'Valor glosado R$',
    'Mês pagamento',
    'Recurso'
]

# Leitura do arquivo Excel com o uso explícito do engine 'openpyxl'
df = pd.read_excel(caminho_arquivo, usecols=colunas_desejadas, engine='openpyxl')

# Mapeamento de nomes de itens para 'Consulta Particular'
consulta_mapping = {
    'consulta a1': 'Consulta Particular',
    'consulta 01': 'Consulta Particular',
    'consulta 02': 'Consulta Particular',
    'consulta 03': 'Consulta Particular'
}

# Substituição dos nomes de itens
df['Item'] = df['Item'].str.lower().map(consulta_mapping).fillna(df['Item'])

# Mapeamento de nomes de profissionais para CRMs
crm_mapping = {
    'Jefferson Jane Oliveira Sousa': 'CRM: 12727',
    'Beda Barros Barkokebas': 'CRM: 20599',
    'Breno Santiago Macedo': 'CRM: 17510',
    'Claudio Henrique Fernandes Vidal': 'CRM: 13107'
}

# Substituição dos nomes pelo CRM
df['Profissional'] = df['Profissional'].map(crm_mapping)

# Ajuste do formato da coluna 'Idade' para exibir apenas a parte inteira
df['Idade'] = df['Idade'].astype(float).astype(pd.Int32Dtype(), errors='ignore')

# Descaracterização da coluna 'Paciente' usando ROT13
df['Paciente'] = df['Paciente'].apply(lambda x: codecs.encode(x, 'rot_13'))

# Criação da coluna 'Forma de Cobrança'
df['Forma de Cobrança'] = df['Forma de Pagamento'].apply(
    lambda x: 'Gruner' if any(keyword in x for keyword in ['Bradesco - Reembolso', 'Consulta Particular', 'Consulta Tele Atendimento', 'dinheiro', 'cartão']) else
              ('Gesaúde' if '- Gruner' in x else ('Coopecir' if '- Coopecir' in x or 'Saúde Petrobras' in x else ('Unimed Recife' if 'Unimed Recife' in x else x)))
)

# Adicionando regra para 'dinheiro' na coluna 'Forma de Cobrança'
df.loc[df['Forma de Pagamento'].str.contains('dinheiro', case=False), 'Forma de Cobrança'] = 'Gruner'

# Criação da coluna 'Forma de Cobrança' com a regra adicional
df['Forma de Cobrança'] = df.apply(lambda row: 'CFH' if row['Profissional'] == 'CRM: 13107' else row['Forma de Cobrança'], axis=1)

# Cabeçalho extra
cabecalho_extra = "Gruner - Grupo de Neurocirurgia do Recife"

# Configurações de formatação para melhorar a visualização
pd.set_option('display.max_columns', None)
pd.set_option('display.expand_frame_repr', False)

# Exibição do cabeçalho extra
print(cabecalho_extra.center(df.shape[1] * 20))

# Exibição da planilha com as colunas desejadas
print(df.to_string(index=False, justify='center'))

# Exibição da contagem de linhas
print(f"\nTotal de Linhas: {len(df)}")

# Pergunta ao usuário sobre a criação do arquivo CSV
resposta_csv = input("\nDeseja criar um arquivo CSV? (Digite 'sim' ou 'não'): ").lower()

if resposta_csv == 'sim':
    # Pergunta ao usuário sobre a criação do arquivo descriptografado
    resposta_descriptografado = input("\nDeseja criar um arquivo descriptografado? (Digite 'sim' ou 'não'): ").lower()

    # Caminho para o arquivo CSV
    caminho_csv = f"/home/henrique/Downloads/Relatorio_Completo_{'Descriptografado' if resposta_descriptografado == 'sim' else 'Criptografado'}.csv"

    # Salvando o DataFrame como arquivo CSV
    df.to_csv(caminho_csv, index=False)
    print(f"Arquivo CSV criado em: {caminho_csv}")

    if resposta_descriptografado == 'sim':
        # Descaracterização da coluna 'Paciente' usando ROT13 reverso (descriptografando)
        df['Paciente'] = df['Paciente'].apply(lambda x: codecs.decode(x, 'rot_13'))

        # Caminho para o arquivo Excel descriptografado
        caminho_excel_descriptografado = "/home/henrique/Downloads/Relatorio_Descriptografado.xlsx"

        # Salvando o DataFrame descriptografado como arquivo Excel
        df.to_excel(caminho_excel_descriptografado, index=False, engine='openpyxl')
        print(f"Arquivo Excel com os dados descriptografados criado em: {caminho_excel_descriptografado}")

else:
    print("Nenhum arquivo CSV foi criado.")

